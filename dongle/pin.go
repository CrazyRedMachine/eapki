package dongle

import (
	"crypto/sha1"
	"fmt"
)

const SerialLength = 16

const (
	stepOldPin = iota
	stepNewPin
	stepAsciiPin

	NumberOfPins
)

type PinGenerator struct {
	serial []byte
	step   int
}

func NewPinGenerator(serial []byte) (*PinGenerator, error) {
	if len(serial) > SerialLength {
		return nil, fmt.Errorf("eapki/dongle: serial number too long: %d > %d", len(serial), SerialLength)
	}
	return &PinGenerator{serial: serial}, nil
}

func (pg *PinGenerator) Generate() []byte {
	if pg.step >= NumberOfPins {
		return nil
	}

	pin := pg.hashSerial()
	if pg.step == stepAsciiPin {
		makeAscii(pin)
	}
	incZeros(pin)

	pg.step++
	return pin
}

func (pg *PinGenerator) hashSerial() []byte {
	var data []byte

	if pg.step == stepNewPin || pg.step == stepAsciiPin {
		data = []byte{
			0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
			0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
			0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
			0x59, 0x5A, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
			0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
			0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
			0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
			0x59, 0x5A, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35,
			// placeholder for serial number
			0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
			0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		}
	} else if pg.step == stepOldPin {
		data = []byte{
			0xC6, 0xEB, 0xF5, 0x84, 0x07, 0x34, 0xD3, 0x32,
			0x4F, 0xA4, 0x93, 0xE3, 0xAA, 0x45, 0x01, 0x4E,
			0x45, 0xAF, 0x93, 0xE3, 0x8A, 0x23, 0x74, 0x02,
			0x45, 0xAF, 0x83, 0x63, 0x23, 0x49, 0x92, 0x45,
			// placeholder for serial number
			0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
			0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
		}
	} else {
		panic("invalid step")
	}
	copy(data[len(data)-SerialLength:], pg.serial)

	sum := sha1.Sum(data)
	return sum[:16]
}

func incZeros(buffer []byte) {
	j := byte(1)
	for i, b := range buffer {
		if b == 0 {
			buffer[i] = j
			j++
		}
	}
}

func makeAscii(buffer []byte) {
	for i, b := range buffer {
		if b >= 128 {
			buffer[i] -= 128
		}
	}
}
